const User = require("../models/User")
const jwt = require('jsonwebtoken')

const handleErrors = (error) => {
    
    
    console.log(error.message, error.code)
    let errors = { email: '', password: '' };

    if(error.message.includes("incorrect email")){
        errors.email = 'that email is not registered'
    }
    if(error.message.includes("incorrect password")){
        errors.password = 'that password is not incorrect'
    } 

    if(error.code === 11000) {
        errors.email = 'that email is already registered'
        return errors
    }

    if(error.message.includes("user validation failed")) {
        Object.values(error.errors).forEach(({properties}) => {
            errors[properties.path] = properties.message; 
        })
    }
    return errors
}
const maxAge = 3 * 24 * 60 * 60
const createToken = (id) => {
    return jwt.sign({ id}, 'aaron varga secret', {
        expiresIn: maxAge
    })
}

module.exports.signup_get = (request, response) => {
    response.render('signup')
}
module.exports.login_get = (request, response) => {
    response.render('login')
}
module.exports.signup_post = async (request, response) => {
    const { email, password} = request.body;
    console.log('we are here in signup')
    try {
        const user = await User.create({email, password})
        const token = createToken(user._id)
        response.cookie('jwt', token, {httpOnly: true, maxAge: maxAge * 1000})
        response.status(201).json({user: user._id})
    }
    catch(error){
        const errors = handleErrors(error)
        response.status(400).json({ errors })
    }
}
module.exports.login_post = async (request, response) => {
    const { email, password} = request.body;

    try {
        const user = await User.login(email, password)
        const token = createToken(user._id)
        response.cookie('jwt', token, {httpOnly: true, maxAge: maxAge * 1000})
        response.status(200).json({user: user._id})
    } catch (error) {
        const errors = handleErrors(error)
        response.status(400).json({ errors })
    }
}
module.exports.logout_get = (request, response) => {
    response.cookie('jwt', '', {maxAge: 1})
    response.redirect('/');
}